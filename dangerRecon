#!/usr/bin/env python3
from concurrent.futures import ProcessPoolExecutor
import subprocess
import argparse

def run_tool(command):
    try:
        tool_name, cmd = command.split('$', 1)
        subprocess.run(cmd, shell=True, check=True, text=True)
        if tool_name != "env":
            print(f"{tool_name} --> done.")
    except subprocess.CalledProcessError as e:
        print("Command failed with error:\n", e.stderr)

def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("-d", "--domain", required=True, help="Specify the target domain.")
    parser.add_argument("-o", "--output", required=False, help="Specify the output file.")

    args = parser.parse_args()

    domain = args.domain
    path = args.output if args.output else f"output/{domain.split('.')[0]}/subdomains.txt"

    run_tool(f"env$mkdir -p output/{domain.split('.')[0]}")

    sublister = f"Sublist3r$python utilities/sublist3r.py -d {domain} >> {path}"
    crt = f'crt.sh$curl https://crt.sh/?q={domain} -s | grep -E ".<TD>([a-zA-Z0-9-]+\.[a-zA-Z0-9.-]+)" | cut -d ">" -f 2 | cut -d "<" -f 1 | sort | uniq >> {path}'
    github = f"github-subdomains$./utilities/github-subdomains -t utilities/token.tokens -o /tmp/domainsFromGithub -d {domain} -raw >> {path}"
    subfinder = f"subfinder$subfinder -all -recursive -silent -d {domain} >> {path}"

    commands = [sublister, crt, github, subfinder]

    with ProcessPoolExecutor(max_workers=4) as executor:
        futures = [executor.submit(run_tool, command) for command in commands]

    run_tool(f"env$sort {path} | uniq > output/{domain.split('.')[0]}/subdomains")
    run_tool(f'env$rm {path}')


if __name__ == "__main__":
    main()
